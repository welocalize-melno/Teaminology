<?xml version="1.0" encoding="UTF-8"?>
<!--
	Application context definition for  on JDBC.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">


    <!-- ========================= RESOURCE DEFINITIONS ========================= -->

    <!-- import the dataSource definition -->
    <import resource="applicationContext-dataSource.xml"/>

    <!-- Transaction manager for a single JDBC DataSource (alternative to JTA)
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
            p:dataSource-ref="dataSource"/>
    -->

    <!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->

    <!--
        Activates various annotations to be detected in bean classes: Spring's
        @Required and @Autowired, as well as JSR 250's @PostConstruct,
        @PreDestroy and @Resource (if available) and JPA's @PersistenceContext
        and @PersistenceUnit (if available).
    -->
    <context:annotation-config/>

    <!--
        Instruct Spring to retrieve and apply @AspectJ aspects which are defined
        as beans in this context (such as the CallMonitoringAspect below).
    -->
    <aop:aspectj-autoproxy/>
   
<!-- <aop:config>
  <aop:pointcut id="teminologyServiceMethods" expression="execution(* com.teaminology.hp.service.*.*(..))"/>
  <aop:advisor advice-ref="transactionAdvice" pointcut-ref="teminologyServiceMethods"/>
</aop:config>
 -->
    <!--
        Instruct Spring to perform automatic transaction management on annotated classes.
        The UserPeerGroupServiceImp implementation declares @Transactional annotations.
        "proxy-target-class" is set because of UserPeerGroupServiceImp's @ManagedOperation usage.
    -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- Scans within the base package of the application for @Components to configure as beans -->
    <context:component-scan base-package="com.teaminology.hp.dao.jdbc"/>

</beans>